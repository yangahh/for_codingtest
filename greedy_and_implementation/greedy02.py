# 문제) 1이 될 때까지
# 어떤 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.
# 1. N에서 1을 뺍니다.
# 2. N을 K로 나눕니다.
# N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.

# 풀이) 주어진 N에 대하여 최대한 많이 나누기(2번 과정)를 수행하면 됩니다. 나누는 작업이 1을 빼는 작업보다 N의 값을 훨씬 많이 줄일 수 있기 때문.
# 즉, N이 K로 나누어 떨어질 때마다 나누기 작업을 수행하도록 하면 된다. 
n, k = map(int, input().split())
'''
cnt = 0
while True:
    if n % k == 0:
        n //= k
    else:
        n -= 1
    cnt += 1

    if n == 1:
        break

print(cnt)
'''

# 다른 풀이 (더 빠른 풀이)
result = 0

while True:
    target = (n // k) * k # target이라는 값은 무조건 n이 k의 배수가 될 수 있는 수 중 가장 큰 값
    result += (n - target) # 즉, n이 k의 배수가 될 때까지 1씩 빼는 연산을 반복하고 연산을 반복한 횟수만큼 result에 더한다.
    n = target
    
    # 더 이상 나눌 수 없을 때 반복문 탈출
    if n < k:
        break

    # K로 나누기    
    result += 1 # 무조건 n을 k로 나누어 떨어지는 연산이 가능하기 때문에 먼저 더한 것
    n //= k

# 마지막으로 남은 수에 대하여 1씩 빼기
result = result + (n-1)
print(result)